#!/usr/bin/perl -w

#use strict;

open(STDERR,">/home/astbill/logs/agi_err_astar.log");

# 4 November 2005 Changed Sub getBalance($)
# Added field ccopeningbalance to Credit Control Calculation
# This allows us to process opening balance on Calling Card without entering Payments.

use DBI;

$|=1;

# Setup some variables
my %AGI; my $tests = 0; my $fail = 0; my $pass = 0;
my $dialpath;
my $dialstr;
my $uniqueid = "";
my $accountcode = "";

my $config = &load_config();
print STDERR "config.conf loaded. dbhost = $config{dbhost}\n";

if ($config{odbc} ne "YES") {
while(<STDIN>) {
	chomp;
	last unless length($_);
	if (/^agi_(\w+)\:\s+(.*)$/) {
		$AGI{$1} = $2;
	}
}}

print STDERR "AGI Environment Dump:\n";
foreach my $i (sort keys %AGI) {
	print STDERR " -- $i = $AGI{$i}\n";
}


my $dbh;
if ($config{odbc} eq "YES") {
	$dbh= DBI->connect("DBI:ODBC:$config{dbdsn}",$config{dbuser},$config{dbpass}) ||   die "Got error $DBI::errstr when connecting to $config{dbdsn}\n";
}
else {
	$dbh = DBI->connect("dbi:mysql:dbname=$config{dbname};server=$config{dbhost}", "$config{dbuser}", "$config{dbpass}"); 
}

my $defmaxminute = &getMaxMinute();
my $maxminute = $defmaxminute->{value};

#### END OF CONFIGURATION #######################################################################################################

sub getBalance($) {
	my ($acc) = @_;
	my $res;
	$sth = $dbh->prepare("select (balance + creditlimit + startingcredit) * 100 as bal, usagecount from asvaccount2 where accountcode = '$acc'");
	$sth->execute;
	$res = $sth->fetchrow_hashref;
	$sth->finish;
	return $res;
}

sub getMaxMinute() {
	my $res;
	$sth = $dbh->prepare("select value from astsystem where name = 'MaxMinute' and serverid = 'DEF'");
	$sth->execute;
	$res = $sth->fetchrow_hashref;
	$sth->finish;
	return $res;
}

sub getCost($) {
	my ($uniqueid) = @_;
	my $res;
	$dbh->do("CALL RateSale(\@sales,\@rate,\@billtime,'$uniqueid')");

	$sth = $dbh->prepare("select \@sales as sales,\@rate as rate,\@billtime as billtime");
	$sth->execute;
	$res = $sth->fetchrow_hashref;
	$sth->finish;
	return $res;
}

sub getNumber($) {
	my ($uniqueid) = @_;
	my $res;
	$sth = $dbh->prepare("select cdr.accountcode, callednum, trunk, IFNULL(addprefix,'') addprefix,IFNULL(removeprefix,'') removeprefix, usstyleprefix, type from astcdr cdr, asttrunk tr where trunk = tr.name and uniqueid = '" . $uniqueid . "' LIMIT 1");
	$sth->execute;
	$res = $sth->fetchrow_hashref;
	$sth->finish;
	my $usidd = ""; 
	if ($res->{removeprefix} ne "0") {
		$res->{callednum} = substr($res->{callednum}, $res->{removeprefix});
    }
	if ($res->{usstyleprefix} eq "1") {
		$firstVar = substr($res->{callednum}, 0, 1);
		if ($firstVar ne "1") {$usidd = "011"; print STDERR ("US 011 Appended: = $firstVar\n");}
    }
	$res->{callednum} = $res->{addprefix} . $usidd . $res->{callednum};
	return $res;
}

sub getLocal($) {
	my ($callednum) = @_;
	my $res;
	$sth = $dbh->prepare("select tech, forwardto, mailbox from astaccount where accountcode = '" . $callednum . "' LIMIT 1");
	$sth->execute;
	$res = $sth->fetchrow_hashref;
	$sth->finish;
	return $res;
}
sub getPath($) {
	my ($trunk) = @_;
	my $res;
	$sth = $dbh->prepare("select path, tech from asttrunk where name = '" . $trunk . "' LIMIT 1");
	$sth->execute;
	$res = $sth->fetchrow_hashref;
	$sth->finish;
	return $res;
}
sub checkresult {
	my ($res) = @_;
	my $retval;
	$tests++;
	chomp $res;
	if ($res =~ /^200/) {
		$res =~ /result=(-?\d+)/;
		if (!length($1)) {
			print STDERR "FAIL ($res)\n";
			$fail++;
		} else {
			print STDERR "PASS ($1)\n";
			$pass++;
		}
	} else {
		print STDERR "FAIL (unexpected result '$res')\n";
		$fail++;
	}
}
sub getresult {
	my ($cmd) = @_;
	my $retval;
	print "$cmd\n";
	my $res = <STDIN>;
	# $result2 = &getresult($result);
	# print STDERR "VOICEMAIL: $result2\n";

	chomp $res;
	if ($res =~ /^200/) {
		$res =~ /result=(-?\d+)/;
		if (!length($1)) {
			print STDERR "FAIL ($res)\n";
		} else {
			# print STDERR "PASS ($1)\n";
			$res =~ s/\(/</;   # Have to convert ( to > and ) to >
			$res =~ s/\)/>/;
			$x = "<(.+)>";    # IAX2/5004@5004/2    SIP/5003-130f
			$res =~/$x/;
			my $tmp = $1;
			# print STDERR "getresult: $1\n";
			$retval = $1;
			return $retval;
		}
	} else {
		print STDERR "FAIL (unexpected result '$res')\n";
	}
}

# This Procedure collects the right dialingstring from the accounts info in the forward field
sub getForward($) {
	my ($forward) = @_;
	my $res = "";
	my $tech;

	@dial = split(/&/, $forward);
    # print STDERR "@dial\n";
    my $sqldial = "";
    for my $dialstr ( @dial ) {
		# print STDERR "dialstr: "  . $dialstr . "\n";
		$sqldial .= $dialstr . "','"
	} 
	chop($sqldial); chop($sqldial); # chop removes the last character - very cool
	# print STDERR $sqldial . "\n";
	#    Recall that you can join the whole array together with a statement like $text = "@lines";
	#	($num, $nide,$sec) = split(/&/, $forward,4);
	#	($tmp, $num)  = split(/=/, $num,2);
	#	($tmp, $nide) = split(/=/, $nide,2);
    $SQL = "select tech, accountcode from astaccount where accountcode in ('" . $sqldial . ") and tech in ('IAX','SIP')";
	my $result = $dbh->selectall_arrayref($SQL);
	unless ($result) {
		# check for errors after every single database call
		print STDERR "dbh->selectall_arrayref($SQL) failed!\n";
		print STDERR "DBI::err=[$DBI::err]\n";
		print STDERR "DBI::errstr=[$DBI::errstr]\n";
		exit; }
	my @resSet = @{$result};
	if ( $#resSet == -1 ) {          
		print STDERR "You Currently have no Forwarding Account\n";
		exit; }
	foreach my $row ( @{ $result } ) {
		my @result = @{ $row };
        # print STDERR "$result[0]   $result[1] \n";
		$tech = $result[0];
		if ($result[0] eq "IAX") {$tech = "IAX2"; }
		$res .= $tech . "/" . $result[1] . "&"; }          

	chop($res);  # chop removes the last character - very cool
	print STDERR  $res . "\n";
	return $res;
}

sub load_config() {
		$runtime = localtime(time);
		if (-e "astbill.conf"){
			open(CFG, "<astbill.conf");
			
		} else {
			open(CFG, "</home/astbill/astbill.conf");
		}
		# chdir ('../newdir') || die ("Could not set new directory");
        while(<CFG>) {
                chomp;
                my ($var, $val) = split(/\s*\=\s*/);
                $config{$var} = $val;
        }
        close(CFG);
		if ($config{odbc} eq "YES") {$jobstr = "XP";} # $ENV{"_"};
        else {$jobstr = $ENV{"_"};}
		print STDERR "Executing: $jobstr    $runtime\n";
		return $config;
}

#### PROGRAM START HER #######################################################################################################


if ($config{odbc} eq "YES") {
	$uniqueid = '1122824054.34';   # Public Call
	$uniqueid = '1122887316.44';   # FORWARD Local Call
	$uniqueid = '1122881333.42';   # Local Call
	$uniqueid = '1122890402.6';   # Debug maxtime 
	
}
else {
	$accountcode = $AGI{'accountcode'};
	# $callerid = $AGI{'callerid'};
	# $calleridname = $AGI{'calleridname'};
	my $channel = $AGI{'channel'};
	# $context = $AGI{'context'};
	
	# my $dnid = $AGI{'dnid'};      #  `callednum` in DB
	# It is more flexible to use $ARGV[0] for $dnid/number to dial as it allows manipulation of numbers in extensions.conf
	# This is an issue in Australia where international dialding is 0011
	my $dnid = $ARGV[0];
	my $extension = $AGI{'extension'};
	
	# $language = $AGI{'language'};
	# $priority = $AGI{'priority'};
	my $type = $AGI{'type'};
	$uniqueid = $AGI{'uniqueid'};
	if ($#ARGV==1) { 
		# Use ${CALLERIDNUM ANI/CLI as Account Code
		# exten => _0[0-9].,1,AGI(agiastar.agi,00${EXTEN}|${CALLERIDNUM})
		$accountcode = $ARGV[1];
		print STDERR "Accountcode = CALLERIDNUM = $ARGV[1]\n";	
	} 

	if ($accountcode eq "") {
		#  $channel = "SIP/77005-a6b5";
		my $x = "/(.+)[-@\/]";    # IAX2/5004@5004/2    SIP/5003-130f   IAX2/70104/2
		$channel =~/$x/;
		#  print "$channel      more:$1\n";
		$accountcode = $1;

		# Ami Added 31 aug 05 Late Evening
		if ($AGI{'type'} eq "IAX2") { 
		    if ($accountcode =~ /\@/) {   # If there is @ in $accountcode
		    	my $x = "^(.+)[@]";    # 70104@70104
				$accountcode =~/$x/;
				#  print "$channel      more:$1\n";
				$accountcode = $1;
			}
		}
	}
	if ($dnid eq 'unknown') {$dnid = $extension};  # Problem when Zap is used

	$dbh->do("CALL RateAddcdr('$accountcode','$channel','$dnid','$type','$uniqueid')");
	print STDERR "CALL RateAddcdr('$accountcode','$channel','$dnid','$type','$uniqueid')\n";
}


my $cnumber = &getNumber($uniqueid);
#  $cnumber->{callednum}   $cnumber->{trunk}
my $acc = &getBalance($cnumber->{accountcode});
my $cost = &getCost($uniqueid);

 if (defined($cnumber))  {
	print STDERR "getNumber: $cnumber->{callednum}   $cnumber->{trunk}  $uniqueid\n";
	print STDERR "accountcode: $accountcode\n";
	$atype = $cnumber->{type};
	if ($cnumber->{type} eq "IAX2") { 
		$atype = "IAX"; 
	}
	my $result2 = &getresult("database get $atype/Registry $accountcode");
	print STDERR "database: $result2\n";
	my $useragent = '';
	if ($cnumber->{type} eq "SIP") { 
		$useragent = &getresult("get variable SIPUSERAGENT");;
		print STDERR "USERAGENT: $useragent\n";
	}
	if ($result2 ne "0") {
		$dbh->do("update astcdr set ipport = '$result2', useragent = '$useragent' where uniqueid = '$uniqueid'");
	} else {
	    $dbh->do("update astcdr set ipport = (select concat(IFNULL(ipaddr,''),':',IFNULL(port,'')) 
		from astaccount where accountcode = '$accountcode' limit 1),
	    useragent = '$useragent'
		where uniqueid = '$uniqueid'");
	}

	if ($cnumber->{trunk} eq "Local") {
		my $clocal = &getLocal($cnumber->{callednum});
		# $clocal->{tech}   $clocal->{forwardto}
		print STDERR "getLocal: $clocal->{tech}  $clocal->{forwardto}\n";

		$maxminute = $defmaxminute->{value};  # Normally 60 min on local calls
		$dialend = "|30|tTL(" . ($maxminute * 60 * 1000) . ":60000:30000)";

		if ($clocal->{tech} eq "IAX") {$clocal->{tech} = "IAX2"	};
        # AstBill-0.9.0.9
		$dialstr = $clocal->{tech}."/".$cnumber->{callednum};
		# $dialstr = $clocal->{tech}."/".$cnumber->{addprefix}.$cnumber->{callednum};

		if ($clocal->{tech} eq "VIR") {$dialstr = getForward($clocal->{forwardto})  };   # Used if Virtual Account

		$dialstr = $dialstr . $dialend;
		print "SET VARIABLE VOICEMAIL $clocal->{mailbox}\n";
		my $result = <STDIN>;
		&checkresult($result);

	} else {

	 if (defined($acc)) {  
		# This is an issue if user come in without autentication. If account number don't exist. We have to check for that and prevent any calls.
		# $acc is not defined if there is no valid account number in the system.
		print STDERR "Account is defined with available Credit: $acc->{bal} Count: $acc->{usagecount} ThisCallCost: $cost->{sales} Rate: $cost->{rate}  BillTime: $cost->{billtime}\n";
		# $acc->{bal} - $cost->{sales} = Min Bal to make a call
		if (($acc->{bal} - $cost->{sales}) >= 0) { # We can make a call. There is some money
		
			if ($cost->{rate} != 0) { # Illegal division by zero 
				# BUG WARNING - the maxminute is suposed to take care of incremental billing. This has to be fixed
				$maxminute = (($acc->{bal} - $cost->{sales}) / $cost->{rate});  # Max minutes to call
			 } else { $maxminute = $defmaxminute->{value} };
			if ($maxminute > $defmaxminute->{value}) { $maxminute = $defmaxminute->{value}; }
			print STDERR "maxminute: $maxminute\n";
			my $cpath = &getPath($cnumber->{trunk});
			$dialpath = $cpath->{path};
			print STDERR "Dialpath1: $dialpath\n";


			if ($cpath->{tech} eq "IAX2") {
				$dialstr = $dialpath . $cnumber->{callednum} . "|30|tTL(" . ($maxminute * 60 * 1000) . ":60000:30000)";
				# print "SET VARIABLE TIMEOUT 3600\n";
	
			} elsif ($cpath->{tech} eq "SIP") {
				$dialstr = "SIP/" . $cnumber->{callednum} . $dialpath . "|30|tTL(" . ($maxminute * 60 * 1000) . ":60000:30000)";
				# $dialstr = $dialpath . $cnumber->{callednum} . "|30|HL(" . ($maxminute * 60 * 1000) . ":60000:30000)";
				# print "SET VARIABLE TIMEOUT 3600\n";

			} elsif ($cpath->{tech} eq "H323") {
				$dialstr = "H323/" . $cnumber->{callednum} . $dialpath . "|30|tTL(" . ($maxminute * 60 * 1000) . ":60000:30000)";
				# Dial(H323/${EXTEN}@sptterminate)
				# $dialstr = $dialpath . $cnumber->{callednum} . "|30|HL(" . ($maxminute * 60 * 1000) . ":60000:30000)";

			} else {
				$dialstr = $cpath->{tech} . $cnumber->{callednum} . $dialpath . "|30|tTL(" . ($maxminute * 60 * 1000) . ":60000:30000)";
			}
		}
		else {  $dialstr = "";     # DONT CALL - NO FOUNDING
	    print STDERR "Warning: NO CREDIT\n";
		print "SET VARIABLE BILLSTATUS NOCREDIT\n";
		# $dbh->do("UPDATE astcdr SET dialstatus = 'NOCREDIT' WHERE uniqueid = '$uniqueid'");
		  # $dbh->do("CALL RateAddcdr('$accountcode','$channel','$dnid','$type','$uniqueid')");
	      # UPDATE astcdr SET dialstatus = 'NOFOUNDING' WHERE uniqueid = suniqueid LIMIT 1;

	}}}
    
	if (defined($acc)) {  
		# This is an issue if user come in without autentication. If account number don't exist. We have to check for that and prevent any calls.
		# $acc is not defined if there is no valid account number in the system.
		print "SET VARIABLE DIALSTRING $dialstr\n";
		print STDERR "DEBUG: $dialstr\n";
	} else {
	    print STDERR "Warning: NO ACCOUNT - NO CREDIT\n";
		print "SET VARIABLE BILLSTATUS NOACCOUNT\n";
	}

	if ($#ARGV>0) { print STDERR "ARGV[0]: $ARGV[0]    $#ARGV\n";	} 
	if ($#ARGV==1) { print STDERR "ARGV[1]: $ARGV[1]\n";	} 
	# if ($#ARGV==-1) { print "\nDomainname (Argument) missing\n "; exit 0;	} 
	#foreach $argnum (0 .. $#ARGV) {
	#	print STDERR "$ARGV[$argnum]\n";
	#}

	# print STDERR "ARGV[1]: $ARGV[1]\n";

} else {  # EXECUTED only if there is no route to number and no astcdr
	print STDERR "That looks like an INVALID number\n";
	print "SET VARIABLE BILLSTATUS INVALID\n";
 }

$dbh->disconnect;

exit 0;
