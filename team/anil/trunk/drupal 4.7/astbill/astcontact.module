<?php
/*
 * AstBill  -- Billing, Routing and Management software for Asterisk and MySQL using Drupal
 *
 * www.astbill.com
 *
 * Asterisk -- A telephony toolkit for Linux.
 * Drupal   -- An Open source content management platform.
 *
 * 
 * Copyright (C) 2005, AOFFICE NOMINEE SECRETARIES LIMITED, UNITED KINGDOM.
 *
 * Andreas Mikkelborg <adoroar [Guess What?] astartelecom.com>
 * Are Casilla        <areast  [Guess What?] astartelecom.com>
 *
 *
 * This program is free software, distributed under the terms of
 * the GNU General Public License
 *
 * 2005.09.23 Version 0.9.0.1    First Public Version of AstBill
 * 
 */

/**
* Contact Directory Module
*
* @version 1.1   contact_dir
* @author  LatPro Inc (George)
* Modified by <areast  [Guess What?] astartelecom.com>
* 24 August 2005
*/


/**
* Display help and module information
* @param section which section of the site we're displaying help
* @return help text for section
*/
function astcontact_help($section='') {
  $output = '';
  switch ($section) {
    case "admin/modules#description":
      $output = t("AstBill Contact Directory");
      break;
  }
  return $output;
} // function astcontact_help

function astcontact_menu($may_cache) {
  $items = array();
  $access = user_access('can use astcontact');

		$items[] = array('path' => 'astcontact',
					'title' => t('Contact directory'),
					'access' => $access,
					'callback' => 'astcontact_page');
/*	    $items[] = array('path' => 'astcontact/list',
					'title' => t('My contacts'),
					'access' => $access,
					'callback' => 'astcontact_page');   */
 /*   	$items[] = array('path' => 'astcontact/search',
					'title' => t('Search contacts'),
					'access' => $access,
					'callback' => 'contact_dir_page');  */

    	$items[] = array('path' => 'astcontact/addnew',
					'title' => t('Add contact'),
					'access' => $access,
					'callback' => 'astcontact_page');

		$items[] = array('path' => 'astcontact/astpbx',
					'title' => t('Manage contact'),
					'callback' => 'astcontact_astpbx',
					'access' => $access,
					'type' => MENU_CALLBACK);
		
		$items[] = array('path' => 'astcontact/category',
                   'title' => t('Categories'),
                   'callback' => 'astcontact_category',
                   'callback arguments' => 'list',
                   'access' => $access);
				  // 'weight' => 5);
	    $items[] = array('path' => 'astcontact/category/list',
                     'title' => t('List Categories'),
                     'type' => MENU_DEFAULT_LOCAL_TASK,
                     'access' => $access,
                     'callback' => 'astcontact_category',
                     'callback arguments' => 'list',
                     'weight' => 5);
    	$items[] = array('path' => 'astcontact/category/add',
                     'title' => t('Add Category'),
                     'type' => MENU_LOCAL_TASK,
                     'access' => $access,
                     'callback' => 'astcontact_category',
                     'callback arguments' => 'add',
					 'weight' => 7);
    	$items[] = array('path' => 'astcontact/category/delete',
                     'title' => t('Delete Category'),
                     'type' => MENU_CALLBACK,
                     'access' => $access,
                     'callback' => 'astcontact_category',
		 			 'callback arguments' => 'delete',
					 'weight' => 7);

      if (arg(0) == 'astcontact' && is_numeric(arg(1))) {


			$items[] = array('path' => 'astcontact/'. arg(1),
					'title' => t('Contact'),
					'type' => MENU_CALLBACK,
					'callback' => 'astcontact_page',
					'access' => $access);
			$items[] = array('path' => 'astcontact/'. arg(1) .'/view',
					'title' => t('View contact'),
					'access' => $access,
					'type' => MENU_DEFAULT_LOCAL_TASK,
					'weight' => -10);
			$items[] = array('path' => 'astcontact/'. arg(1) .'/edit',
					'title' => t('Edit contact'),
					'callback' => 'astcontact_page',
					'access' => $access,
					'type' => MENU_LOCAL_TASK,
					'weight' => -9);
/*			$items[] = array('path' => 'astcontact/'. arg(1) .'/add',
					'title' => t('Add contact'),
					'callback' => 'astcontact_page',
					'access' => $access,
					'type' => MENU_LOCAL_TASK);    */
      } 


 return $items;
}
/**
 * Implementation of hook_node_name
 */
function astcontact_node_name () {
	$name = t('Contact directory');
	if ( empty($name) ) {
		$name = 'Contact directory';
	}
	return $name;
}

/**
* Valid permissions for this module
* @return array An array of valid permissions for the astpbx module
* At this point, we'll give permission to anyone who can access site content 
* or administrate the module:
*/
function astcontact_perm() {
	return array('can use astcontact');
  // return array('can use astpbx');
} // function astpbx_perm()


/**
 * Handles the user's request
 */
function astcontact_page() {
	global $user;

	$edit = $_POST['edit'];
	$op = $_POST['op'];
	$output = '';

	if (empty($op)) {
		$op = arg(2) ? arg(2) : arg(1);
		if (arg(1) == "addnew") {$op = "addnew";}
	}

	$cid = arg(1);

	switch ($op) {
	/*	case 'search':
			$output = _contact_dir_search();
			break;    
		case t('Search'):
			$output = _contact_dir_get_contacts($edit, $user, $shared);
			break;    */
		case 'list':
			$output = astcontact_list_contacts($edit);
			// $output = _contact_dir_get_contacts($edit, $user);
			break;
		case 'addnew':
		case t('Add contact'):
			$cid = 0;
		case 'edit':
		case t('Save contact'):
		case t('Delete contact'):
			$output = astcontact_edit($cid);
			break;
		default:
			if ($cid) {
				$output = astcontact_view($cid);
			} else {
				$output = astcontact_list_contacts($edit);
			}
	}  
	print theme('page', $output);
}


/**
 * This function creates a list of contacts for the specified interface
 */
function astcontact_list_contacts($edit) {
	global $user;

	$header = array();
	$colspan = 0;

	$header[] = array('data' => t('Name'), 'field' => 'name', 'sort' => 'asc');
	$header[] = array('data' => t('Phone'), 'field' => 'phone');
	$header[] = array('data' => t('Mail'), 'field' => 'mail');
	$header[] = array('data' => t('Category'), 'field' => 'category');
	$colspan = 3;

	$sql = "SELECT co.cid, CONCAT_WS(' ', co.last_name, co.first_name) AS name, 
	co.phone as phone, co.mail as mail, ca.name as category
	FROM ({contact_directory} co LEFT JOIN {contact_directory} ca ON co.category = ca.cid) 
	WHERE co.uid = " . $user->uid;


	$sql = "SELECT co.cid, CONCAT_WS(' ', co.last_name, co.first_name) AS name, 
	co.phone as phone, co.mail as mail, ca.name as category
	FROM ({contact_directory} co LEFT JOIN {contact_category} ca ON co.category = ca.cid) 
	WHERE co.uid = " . $user->uid;



	$sql .= tablesort_sql($header);

	$result = pager_query($sql, 50);
	$rows = array();

	while ($contact = db_fetch_object($result)) {
			$rows[] = array(l($contact->name, 'astcontact/'. urlencode($contact->cid)),
				$contact->phone,
				$contact->mail,
				$contact->category);
		}

	$pager = theme('pager', NULL, 50, 0);
	if (!empty($pager)) {
		$rows[] = array(array('data' => $pager, 'colspan' => $colspan));
	}
	return theme('table', $header, $rows);
}

/**
 * Display a page with the contact info
 */
function astcontact_view($cid) {
	$output = '';

	$contact = astcontact_load($cid);



	// $result = db_query("SELECT category FROM {contact_directory} WHERE cid = %d", $cid);
	$result = db_query("SELECT category, name  FROM {contact_directory} cd, {contact_category} cc 
	where cc.cid=cd.category and  cd.cid = %d", $cid);

	// $result = db_query("SELECT category, name  FROM {contact_directory} cd, {contact_category} WHERE cd.cid = %d", 18);

	$result2 = db_fetch_object($result);
	//$output = form_select(t("Category"), "category", $result2->category, contact_dir_getcategory());
    

	$fields = astcontact_get_fields();

	$output .= "<h2>$contact->first_name $contact->middle_name $contact->last_name</h2>";
    $output .= "<b>".t('Category:')."</b>&nbsp;&nbsp;" . $result2->name;
	foreach ($fields as $field => $def) {
		$view = $def[4];
		$name = $def[1];
		$value= '';
		if (in_array($def[0], array('password', 'textfield', 'textarea'))) {
			$value = $contact->$field;
		} else if ($field == 'url') {
			$url = $contact->$field;
			if (substr_count($url, 'http')) {
				$url = Substr($url, strpos($url, '://') + 3);
			}
			$value = "<a href=\"http://$url\" target=\"_blank\">$url</a>";
		} else {
			$value = $def[7][$contact->$field];
		}
		if ($view[0] && !empty($value)) {
			// $output .= ".".$value.".".strlen(trim($value));
			if ($name != 'Url') {
				$output .= form_item($name, $value);
			} else {
				if (strlen(trim($value)) != 38) { $output .= form_item($name, $value); }
   				//if ( empty(trim($value)) ) { $output .= form_item($name, $value); }
				// if (is_null($value)) { $output .= form_item($name, $value); }
				//if (strlen(trim($value)) > 2) { $output .= form_item($name, $value); }
			}
		}
	}
	return $output;
}

/**
 * Loads a contact
 */
function astcontact_load($cid) {
	$result = db_query('SELECT * FROM {contact_directory} WHERE cid = %d', $cid);
	return db_fetch_object($result);
}

/**
 * Return an array with the contact fields definitions
 */
function astcontact_get_fields() {
	$fields = array();
	if (file_exists('modules/astbill/astcontact_fields.inc')) {
		include_once 'modules/astbill/astcontact_fields.inc';
		$fields = astcontact_fields();
	}
	return $fields;
}

/**
 * Display a page with the contact info  
 */
function astcontact_edit($cid = 0) {
	global $user;


	// gets the specified contact
	$contact = astcontact_load_contact($cid);
	$edit = $_POST['op'] ? $_POST['edit'] : object2array($contact);
	$op = $_POST['op'];

	if ($op == t('Save contact') || $op == t('Add contact')) {
	//	_contact_dir_edit_validate($edit);
		if (!form_get_errors()) {
			astcontact_save_contact($contact, $edit, $user->uid);
			drupal_set_message(t('The changes have been saved.'));
			drupal_goto("astcontact");
		}
	} else if ($op == t('Delete contact')) {
		// deletes contact
		db_query('DELETE FROM {contact_directory} WHERE cid = %d', $cid);
		drupal_set_message(t('The contact has been deleted.'));
		drupal_goto("astcontact");
	}
// modified by AMI astartelecom.com 21 aug 2005 
// The purpose is to allow feeding of phone no from the following url astcontact/addnew/0207xxxxx
if ($cid == 0) { $edit['phone'] = arg(2); }
// END MODIFICATION AMI astartelecom.com
// drupal_set_message(t('astcontact_astpbx ' . $cid));
	// Display the input form
 	$output = astcontact_edit_form($edit);
	if ($cid) {
		// Edit contact
		$output .= form_submit(t('Save contact'));
		// if ( _contact_dir_is_contact_accessible($cid) ) {
			$output .= form_submit(t('Delete contact'));
		// }
	} else {
		$output .= form_submit(t('Add contact'));
		// test if user can adda a contact
	//	if ( !_contact_dir_validate_contact_creation($user->uid) ) {
	//		return t('<p>You can not add a new contact.</p>');
	//	}
	}

	return form($output);
}

function astcontact_load_contact($cid) {
	$result = db_query('SELECT * FROM {contact_directory} WHERE cid = %d', $cid);
	return db_fetch_object($result);
}

/**
 * Crates a input form
 */
function astcontact_edit_form($edit) {
	$output = '';

// AMI
	$cid = arg(1);
	if ($cid != "addnew") {
    // Make sure you don't trust the URL to be safe! Always check for exploits.
    //if (!is_numeric($alice) || !is_numeric($bob)) {
    if (!is_numeric($cid)) {
       // We will just show a standard "access denied" page in this case.
       drupal_access_denied();
       return;
    }}

	$result = db_query("SELECT category FROM {contact_directory} WHERE cid = %d", $cid);
	$result2 = db_fetch_object($result);
	$output = form_select(t("Category"), "category", $result2->category, astcontact_getcategory());
    // $output .= $result2->category;









	$fields = astcontact_get_fields();
	foreach ($fields as $field => $def) {
		$function = "form_$def[0]";
		switch ($def[0]) {
			case 'url':
				$function = "form_textfield";
			case 'textfield':
			case 'password':
			case 'textarea':
				$output .= $function($def[1], $field, $edit[$field], $def[7], $def[8], $def[9] . theme_error($error[$field]), $def[10], $def[2]);
				break;
			case 'select':
				$output .= $function($def[1], $field, $edit[$field], $def[7], $def[9] . theme_error($error[$field]), $def[10], $def[8], $def[2]);
				break;
		}
	}
	if (user_access('administer contacts')) {
		$output .= form_weight(t('Rating'), 'rating', $edit['rating'], 10, t('contact\'s rating'));
	}
	return $output;
}

/**
 * Persist the changes to the database
 */
function astcontact_save_contact($contact, $edit, $uid) {
	$fields = array_keys(astcontact_get_fields());

	// Test if the contact is new or already exists
	if ($contact->cid) {
		$fields[] = 'rating';

		// Update contact
		$query = '';
		$params = array();

		foreach ($edit as $key => $value) {
			if (in_array($key, $fields)) {
				$query .= "$key = '%s', ";
				$params[] = $value;
			}
		}
		db_query("UPDATE {contact_directory} SET $query changed = %d WHERE cid = %d", array_merge($params, array(time(), $contact->cid)));
		db_query("UPDATE {contact_directory} SET category = %d WHERE cid = %d", $edit['category'], $contact->cid);
	} else {
		// Insert contact
		$fields[] = 'cid';
		$fields[] = 'uid';
		$fields[] = 'created';
		$fields[] = 'changed';
		$fields[] = 'rating';

		$edit['cid'] = db_next_id('{contact_directory}_cid');
		$edit['uid'] = $uid;
		$edit['created'] = time();
		$edit['changed'] = time();
		$edit['rating'] = '0';

		$columns = array();
		$params = array();
		$types = array();

		foreach ($edit as $key => $value) {
			if (in_array($key, $fields)) {
				$columns[] = $key;
				$params[] = $value;
				$types[] = "'%s'";
			}
		}
		$sql = 'INSERT INTO {contact_directory} ('. implode(', ', $columns) .') VALUES ('. implode(', ', $types) .')';
		db_query($sql, $params);
		db_query("UPDATE {contact_directory} SET category = %d WHERE cid = %d", $edit['category'], $edit['cid']);


	}
}

function astcontact_getcategory() {
global $user;
$sql = db_query("SELECT cid, name FROM {contact_category} WHERE uid = %d", $user->uid);
$account = "test";
 $sql_output = array();
  
  while ($model = db_fetch_object($sql)) {
     astcontact_array_push($sql_output, $model->name, $model->cid);
  }
  return  $sql_output;
}

function astcontact_array_push(&$array,$object,$key=null){
   $keys = array_keys($array);
   rsort($keys);
   $newkey = ($key==null)?$keys[0]+1:$key;
   $array[$newkey] = $object;
   return $newkey;
}

/**
 * Handles requests sent by the categories interface
 */
function astcontact_category($action) {
	$op = $_POST['op'];
	if (empty($op)) {
		$op = $action;
	}

	$edit = $_POST['edit'];
	$output = '';

	if (user_access('can use astcontact')) {
		switch ($op) {
			case 'list':
				$output = astcontact_category_list();
				break;
			case 'add':
			case t('Create category'):
				$output = astcontact_category_add($edit);
				break;
			case 'delete':
			case t('Delete'):
				$output = astcontact_cat_delete($edit);
				break;
			case t('Save categories'):
				astcontact_category_update($edit);
				break;
		}
		print theme('page', $output);
	} else {
		print theme('page', message_access());
	}
}

/**
 * Creates an administration page with a list of contact categories
 */
function astcontact_category_list() {
	$output = '';

	// declares the table header
	$header = array();
	$header[] = array('data' => t('Name'));
	$header[] = array('data' => t('Operations'));
	$categories = array();

	$categories = astcontact_get_categories();
	$rows = array();
	if (!empty($categories)) {
	foreach ($categories as $key => $value) {
		$rows[] = array(
				form_textfield('', 'name]['. $key, $value, 40, 100),
				l(t('delete'), 'astcontact/category/delete/'. urlencode($key)));
	}}
	$output = theme('table', $header, $rows);
	$output .= form_submit(t('Save categories'));
	return form($output);
}
/**
 * Returns an array with all the records in the table contact_dir_category
 */
function astcontact_get_categories() {
	global $user;
	static $contact_dir_categories;
	if ( !isset($contact_dir_categories) ) {
		$result = db_query('SELECT cid, name FROM {contact_category} WHERE uid = %d ORDER BY name', $user->uid);
		while ($field = db_fetch_object($result)) {
			$contact_dir_categories[$field->cid] = $field->name;
		}    
	}
	return $contact_dir_categories;
}

/**
 * Creates a input form for a new contact category
 */
function astcontact_category_add($edit) {
	global $user;
	$output = '';

	if ($edit) {
		if (empty($edit['category_name'])) {
			form_set_error('category_name', t('The field name is required.'));
		}
		if ( !form_get_errors() ) {
			// Insert the new category
			$cid = db_next_id('{contact_category}_uid');
			db_query("INSERT INTO {contact_category} (cid, uid, name) VALUES (%d, %d, '%s')", $cid, $user->uid, $edit['category_name']);

			// Redirects the response to the list page
	        drupal_set_message(t('The changes have been saved.'));
   		    drupal_goto("astcontact/category");    // AMI
		}
	}

	// Display the input form
	$output = form_textfield(t('Name'), 'category_name', $edit['category_name'], 30, 100);
	$output = form_group(t('Category'), $output);
	$output .= form_submit(t('Create category'));
	return form($output);
}
/**
 * Creates a form for delete a category
 */
function astcontact_cat_delete($edit) {
	global $user;
	$cid = arg(3);
	$output = '';

	if ($edit) {
		db_query("DELETE FROM {contact_category} WHERE cid = %d and uid = %d", $cid, $user->uid);
		// db_query("DELETE FROM {contact_category} WHERE cid = % d", $edit['cid']);

		// Redirects the response to the list page
		drupal_set_message(t('The category was deleted.'));
		drupal_goto("astcontact/category");
	}

	// Creates a confirmation form
	$categories = astcontact_get_categories();

	$output = form_item(t("Delete category '%name'", array('%name' => $categories[$cid])), '');
	$output .= t('<p>Are you sure you want to delete the category and all data associated with it?</p>');
	$output .= form_hidden('cid', $cid);
	$output .= form_submit(t('Delete'));

	return form($output);
}

/**
 * Update the category list
 */
function astcontact_category_update($edit) {
	$categories = astcontact_get_categories();

	if ( $edit ) {
		foreach ($categories as $key => $value) {
			$name = $edit['name'][$key];
			if ( empty($name) ) {
				$name = $value;
			}
			if ( $name && $key ) {
				db_query("UPDATE {contact_category} SET name = '%s' WHERE cid = %d", $name, $key);
			}
		}
		drupal_set_message(t('The changes have been saved.'));
	}
	// Redirects the response to the list page
	drupal_goto("astcontact/category");
}

// Added by AMI astartelecom.com 21 aug 2005
// The purpose is to allow Loading of data from phone no from the following url contact_dir/add/add/0207xxxxx
function astcontact_load_phone($phoneno) {
	$result = db_query("SELECT cid FROM {contact_directory} WHERE phone = '%s' LIMIT 1", $phoneno);
	return db_fetch_object($result);
}
// END MODIFICATION AMI astartelecom.com

// Added by AMI astartelecom.com 21 aug 2005
function astcontact_astpbx() {
	$contact = astcontact_load_phone(arg(2));
	$cid = $contact->cid;
    // drupal_set_message(t('astcontact_astpbx ' . $cid));
	if ($cid) {drupal_goto("astcontact/$cid");}
	else {
		$cid = 0; 
		drupal_goto("astcontact/addnew/".arg(2));
	}   
}
// END MODIFICATION AMI astartelecom.com


?>
