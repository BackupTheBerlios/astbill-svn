<?php

/*
 * AstBill  -- Billing, Routing and Management software for Asterisk and MySQL using Drupal
 *
 * www.astbill.com
 *
 * Asterisk -- A telephony toolkit for Linux.
 * Drupal   -- An Open source content management platform.
 *
 * 
 * Copyright (C) 2005, AOFFICE NOMINEE SECRETARIES LIMITED, UNITED KINGDOM.
 *
 * Andreas Mikkelborg <adoroar [Guess What?] astartelecom.com>
 * Are Casilla        <areast  [Guess What?] astartelecom.com>
 *
 *
 * This program is free software, distributed under the terms of
 * the GNU General Public License
 *
 * 2006.03.17 Version 0.9.18
 * 
 */

/* FUNCTIONS:

**$value = $edit['search'];
**$tmp = astcore_flattenArray($_GET);
**if (!empty($tmp['searchedit'])) {
**	$value = $tmp['searchedit'];
**}
**$output = astcore_search($edit, url('astbilladm/realtime/friends'), $value);
astcore_search($edit, $posturl, $value = NULL)

**$undermenu = array(url('astbilladm/payment/create/').'">'.t('Create New Payment'));
astcore_printtheme($page_content, $title, $undermenu = 'FALSE', $undermenutitle = 'FALSE')

**$title = t('Remove Trunk:').' '.arg(4);
**$confirmmsg = t('Are you sure you want to delete this trunk?');
**$deletedmsg = t('Trunk '.arg(4).' was deleted');
**$donegoto = 'astbilladm/trunks';
**$dbqueries = array();
**$dbqueries[] = "DELETE FROM astaccount WHERE accountcode = (select accountcode from asttrunk where tid = ".arg(3).")";
**$dbqueries[] = "DELETE FROM asttrunk WHERE tid = ".arg(3);
astcore_confirm_delete($title, $confirmmsg, $deletedmsg, $donegoto, $dbqueries, $backgoto = 'DEFAULT')

astcore_list($header, $rows, $noresults, $maxline)

astcore_email($from , $to, $subject, $message, $attachment)

function astcore_exportsql($sqlquery, $columnnames)

astcore_flattenArray($array, $keyname='')
*/


function astcore_help($section='') {
	$output = '';
	switch ($section) {
		case "admin/modules#description":
		$output = t("AstBill Core Functions");
		break;
	}
	return $output;
}


function astcore_search($edit, $posturl, $value = NULL, $endform = 'YES') {
	$edit = $_POST["edit"];
	$op = $_POST["op"];
	
	if (empty($value)) {
		$value = $edit['search'];
	}
	
	$output = '
<form action="'.$posturl.'" method="post">
<div class="form-item">
<B>'.t('Enter a search string').'&nbsp;&nbsp;</B>
<input type="text" size="20" value="'.$value.'" name="edit[search]" alt="'.t('Enter a term to search').'" />&#160;
<input type="submit" name="search" value="'.t('Search').'" />&#160;&#160;
</div>';

	if ($endform == 'YES') {
		$output .= '</form>';
	} else {
		
	}
/*
	$group .= form_textfield($title, 'search', $value, 30, 30, $description = NULL, $attributes = NULL, $required = FALSE);
	$group .= form_submit('Search');
	
	$output = form($group);
*/	
	return $output;
}


function astcore_printtheme($page_content, $title, $undermenu = 'FALSE', $undermenutitle = 'FALSE', $overmenu = 'FALSE') {
	$output = '<div class="node "><table width="100%" border="0" cellpadding="0" cellspacing="0"><tr><td class="corner_img_l">&#160;</td><td><h1 class="nodetitle">'.$title.'</h1></td><td class="corner_img_r">&#160;</td></tr></table></div>';
		
	if ($overmenu != 'FALSE') {
		$output .= '<DIV CLASS="nodecontent">';
		foreach ($overmenu as $key => $value) {
			$output .= '<B><FONT SIZE=1><A HREF="'.$value.'</A></B></FONT><BR>';
		}
		$output .= '</DIV>';
	}
	
	$output .= '<div class="nodecontent">'. $page_content . "</div>\n";
	
	if ($undermenutitle != 'FALSE' OR $undermenu != 'FALSE') {
		$output .= '<DIV CLASS="nodecontent">';
	}
	
	if ($undermenutitle != 'FALSE') {
		$output .= '<B>'.$undermenutitle.'</B><BR>';
	}
	
	if ($undermenu != 'FALSE') {
		foreach ($undermenu as $key => $value) {
			$output .= '<B><FONT SIZE=1><A HREF="'.$value.'</A></B></FONT><BR>';
		}
		$output .= '</DIV>';
	}
	
	print theme("page", $output);
}

function astcore_confirm_delete($title, $confirmmsg, $deletedmsg, $donegoto, $dbqueries, $backgoto = 'DEFAULT') {
	$op = $_POST['op'];
	$edit = $_POST['edit'];

	if ($edit['deleteverified'] == 'deleteverified') {
		foreach ($dbqueries as $key) {
			db_query($key);
		}
		
		drupal_set_message(t($deletedmsg));
		drupal_goto($donegoto);
	}
	if ($op == t('Back')) {
		
		if ($backgoto == 'DEFAULT') {$backgoto = $donegoto;}
		drupal_goto($backgoto);
	}
	
	$output .= '<BR>'.$confirmmsg.'<BR><BR>';
	
	$output .= form_hidden('deleteverified', 'deleteverified');
	$output .= form_submit(t('Delete'));
	$output .= form_submit(t('Back'));

	$group = form($output);

	astcore_printtheme($group, $title);
	exit();
}

function astcore_list($header, $rows, $noresults, $maxline) {

	$pager = theme('pager', null, $maxline, 0, tablesort_pager()); 
	if (!empty($pager)) {
		$rows[] = array(array('data' => $pager, 'colspan' => 8));
	}

	$output .= (count($rows) == 0) ? $noresults : theme('table', $header, $rows);
	
	/* ROWS[] EXAMPLE
		$rows[] = array(
		array('data' => $res->date_created, 'align' => 'right'),
		array('data' => $res->dialstatus, 'align' => 'right'),
		array('data' => $res->billtime, 'align' => 'right'));
	*/
	
	
	return $output;
}

function astcore_email($from , $to, $subject, $message, $attachment, $filetype = 'TEXT') {
	$fileatt = $attachment; // Path to the file                  
	$fileatt_type = "application/octet-stream"; // File Type 
	$start = strrpos($attachment, '/') == -1 ? strrpos($attachment, '//') : strrpos($attachment, '/')+1;
	$fileatt_name = substr($attachment, $start, strlen($attachment)); // Filename that will be used for the file as the 	attachment 

	$email_from = $from; // Who the email is from 
	$email_subject =  $subject; // The Subject of the email 
	$email_txt = $message; // Message that the email has in it 
	$email_to = $to; // Who the email is to

	$headers = "From: ".$email_from . "\r\n" . "X-Mailer: AstBill/Version 0.9.18";

	$file = fopen($fileatt,'rb'); 
	$data = fread($file,filesize($fileatt)); 
	fclose($file); 

	$semi_rand = md5(time()); 
	$mime_boundary = "==Multipart_Boundary_x{$semi_rand}x"; 
    
	$headers .= "\nMIME-Version: 1.0\n" . 
            "Content-Type: multipart/mixed;\n" . 
            " boundary=\"{$mime_boundary}\""; 

	if ($filetype == 'TEXT') {
		$email_message .= "This is a multi-part message in MIME format.\n\n" . 
                "--{$mime_boundary}\n" . 
               // "Content-Type:text/html; charset=\"iso-8859-1\"\n" . 
               //"Content-Transfer-Encoding: 7bit\n\n" . 
	       $email_txt . "\n\n"; 
	} else {
		$email_message .= "This is a multi-part message in MIME format.\n\n" . 
                "--{$mime_boundary}\n" . 
                "Content-Type:text/html; charset=\"iso-8859-1\"\n" . 
                "Content-Transfer-Encoding: 7bit\n\n" . 
	        $email_txt . "\n\n"; 	
		
		
	}
	    
	$data = chunk_split(base64_encode($data)); 

	$email_message .= "--{$mime_boundary}\n" . 
                  "Content-Type: {$fileatt_type};\n" . 
                  " name=\"{$fileatt_name}\"\n" . 
                  //"Content-Disposition: attachment;\n" . 
                  //" filename=\"{$fileatt_name}\"\n" . 
                  "Content-Transfer-Encoding: base64\n\n" . 
                 $data . "\n\n" . 
                  "--{$mime_boundary}--\n"; 


	$ok = @mail($email_to, $email_subject, $email_message, $headers); 

	if($ok) { 
	} else { 
		die("Sorry but the email could not be sent. Please go back and try again!"); 
	} 
}

function astcore_exportsql($sqlquery, $columnnames) {
	global $db_prefix;
  	$edit = $_POST["edit"];
  	$op = $_POST["op"];
	
	$list = $columnnames.'
';
	
	$columns = explode(",", $columnnames);
	
	while ($item = db_fetch_array($sqlquery)) {
		foreach ($columns as $key) {
			$list .= $item[$key].',';
		}
		$list .= '
';
	}
	
	$filename = 'Orders.csv';
	$size = strlen($list);
	header("Content-length: ".$size);
	header("Content-type: text/comma-separated-values");
	header("Content-Disposition: attachment; filename=".$filename);
	
	echo $list;
	
	exit;
}

function astcore_flattenArray($array, $keyname='')
{
   $tmp = array();
   foreach($array as $key => $value)
   {
       if(is_array($value))
           $tmp = array_merge($tmp,astcore_flattenArray($value,$key));
       else
           $tmp[$key.$keyname] = $value;
   }
   return $tmp;
}


// DRUPAL CORE MODS

 /**
 * Recursively construct an URI string from an array.
 *
 * The main purpose of this function was to allow search results to be paged
 * and tablesorted. The only coding change involved for developers is to
 * use $_REQUEST['edit'] and $_REQUEST['op'] instead of $_POST['edit'] and
 * $_POST['op'] within your controller function.
 *
 * @param $to_uri
 *   A string or array to convert into an URI querystring. The array can be
 *   multidimensional.
 * @param $current_key
 *   Used internally by the function to store the cumulative key values of
 *   each successive array.
 * @return
 *   A string suitable for passing as an HTTP GET querystring for an URL.
 */
function array2uri($to_uri, $current_key = '') {
  $query_string = '';

  if (!is_array($to_uri)) {
    return (isset($to_uri) ? '&'. $to_uri : NULL);
  }

  foreach ($to_uri as $key => $value) {
    if (is_array($value) && !$current_key) {
      $key_param = ($current_key) ? "${current_key}[$key]" : $key;
      $query_string .= array2uri($value, $key_param);
    }
    elseif (is_scalar($value)) {
      if ($current_key) {
        $key_as_uri = "${current_key}[$key]";
        $query_string .= '&'. $key_as_uri. '='. urlencode($value);
      }
      else {
        $query_string .= '&'. $key. '='. urlencode($value);
      }
    }
  }

  return $query_string;
}

/*
Modification in menu.inc line 351:
Function menu_execute_active_handler()
  if (strlen($arg)) {
+   if (!is_array($arguments)) {$arguments = array();}
    $arguments = array_merge($arguments, explode('/', $arg));
  }
  
Modification in tablesort.inc line 137:
function tablesort_get_querystring() {
  $cgi = $_SERVER['REQUEST_METHOD'] == 'GET' ? $_GET : $_POST;
  $query_string = '';

// Removed by AstBill
//  foreach ($cgi as $key => $val) {
//    if ($key != 'order' && $key != 'sort' && $key != 'q') {
//      $query_string .= '&'. $key .'='. $val;
//    }
//  }
//  return $query_string;
// added by AstBill
  unset($cgi['order'], $cgi['sort'], $cgi['q']);
  return array2uri($cgi);
}

Modifcation in pager.inc line 383:
function pager_link($from_new, $element, $attributes = array()) {
  $q = $_GET['q'];
  $from = array_key_exists('from', $_GET) ? $_GET['from'] : '';

//  foreach ($attributes as $key => $value) {
//    $query[] = $key .'='. $value;
//  }

  $from_new = pager_load_array($from_new[$element], $element, explode(',', $from));

  
//  if (count($attributes)) {
//    $url = url($q, 'from='. implode($from_new, ',') .'&'. implode('&', $query));
//  }
//  else {
//    $url = url($q, 'from='. implode($from_new, ','));
//  }
  
  $query_string = array2uri($attributes);
  $url = url($q, 'from='. implode($from_new, ',') . $query_string);

  return check_url($url);
}
*/
/*
JAVA SCRIPTS:

$javaquestion = '
	<SCRIPT LANGUAGE="JavaScript">
	function question() {
		test=confirm("Did the invoices print ok?");
		if (test) {
			window.location.href = "'.url('astbilladm/invoice/yes').'";
		} else {
			window.location.href = "'.url('astbilladm/invoice').'";
		}
	}
	question()
	</SCRIPT>';
*/

?>
