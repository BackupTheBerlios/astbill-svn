<?php

/*
 * AstBill  -- Billing, Routing and Management software for Asterisk and MySQL using Drupal
 *
 * www.astbill.com
 *
 * Asterisk -- A telephony toolkit for Linux.
 * Drupal   -- An Open source content management platform.
 *
 * 
 * Copyright (C) 2005, AOFFICE NOMINEE SECRETARIES LIMITED, UNITED KINGDOM.
 *
 * Andreas Mikkelborg <adoroar [Guess What?] astartelecom.com>
 * Are Casilla        <areast  [Guess What?] astartelecom.com>
 *
 *
 * This program is free software, distributed under the terms of
 * the GNU General Public License
 *
 * 2006.03.17 Version 0.9.18
 * 
 */

/**
* Display help and module information
* @param section which section of the site we're displaying help
* @return help text for section
*/


function astsettingsdid_help($section='') {
  $output = '';
  switch ($section) {
    case "admin/modules#description":
      $output = t("AstBill Settings DID");
      break;
  }
  return $output;
} // function astentry_help


function astsettingsdid_menu($may_cache) {
  $items   = array();
  $access  = user_access('astsettingsdid batch');
  $access2 = user_access('astsettingsdid Incomming');

  $items[] = array('path' => 'astbilladm/settings/createdidbatch',
                                  'title' => t('Generate DIDs'),
                                  'callback' => 'astsettingsdid_createdidbatch',
                                  'access' => $access);
                                 // 'type' => MENU_CALLBACK);

  $items[] = array('path' => 'astbilladm/incomming',
                                  'title' => t('Incoming Numbers'),
                                  'callback' => 'settingsdid_incomming_main',
                                  'access' => $access2);
                                 // 'type' => MENU_CALLBACK);

  $items[] = array('path' => 'astbilladm/incomming/assign',
                                  'title' => t('Assign Incoming Number'),
                                  'callback' => 'settingsdid_incomming_assign',
                                  'access' => $access2,
                                 'type' => MENU_CALLBACK);

  return $items;
}

function astsettingsdid_perm() {
	return array('astsettingsdid batch', 'astsettingsdid Incomming');
}

//////////////////////////////////////////////////////////////////////////////

// BEGIN CREATE DID BATCH STUFF

function astsettingsdid_createdidbatch() {
	global $user;

	$edit = $_POST["edit"];
	$op = $_POST["op"];

	switch ($op) {
	
	case t('Generate'):
		//print_r($edit);
		if (astsettingsdid_createbatch_validate($edit)) {
			astsettingsdid_createbatch_save($edit);
			//drupal_goto("astbilladm/settings/createbatch");
			$output = astsettingsdid_createdidbatch_form($edit);
		} else {
			$output = astsettingsdid_createdidbatch_form($edit);
		}
		break;

	default:
		$output = astsettingsdid_createdidbatch_form($edit);
	}
	

	
	$title = t("Generate DID's");


	astcore_printtheme($output, $title);
}

// FORM STUFF
function astsettingsdid_createbatch_validate($edit) {
	global $user;
	global $db_prefix; 
	$myerror = 1;
	$errors = array();
	
	if(!is_numeric($edit['fromdid'])) {
		$errors['fromdid'] = t('Enter a numeric only DID.');
		$myerror = 0;
	} else {
		$sql = db_fetch_object(db_query("select did from astacdid where did = '%s'", $edit['fromdid']));
		
		if(!empty($sql->did)) {
			$errors['fromdid'] = t('DID already exists.');
			$myerror = 0;
		}
	}
	if(!is_numeric($edit['nodid'])) {
		$errors['nodid'] = t('Enter a numeric value for number of DIDs.');
		$myerror = 0;
	}
	foreach ($errors as $name => $message) {
		form_set_error($name, $message);
	} 
	return $myerror;
}

function astsettingsdid_createbatch_save($edit) {
  global $user;
  global $db_prefix; 

	$x = 0;
	while ($x < $edit['nodid']) {
		
		$account = $edit['prefix'].($edit['fromdid']+$x);		

		// START CHECK
		$sql = db_fetch_object(db_query("SELECT did FROM astacdid WHERE did = '%s'", $account));
			
		if (empty($sql->did)) {

	$sql = "INSERT INTO astacdid SET did = '".$account."',db_prefix = '".$db_prefix."',acgroup='".$edit['acgroup']."',uid = '".$edit['uid']."',active = '1',remarks = '".$edit['remarks']."'";

	db_query($sql);  	}
		$x++;
	}

drupal_set_message(t('Created '.$edit['nodid'].' DIDs'));
//drupal_set_message(t('<BR>'));

/*
drupal_set_message(t('AccountCode -> '.$accountcodechecked[$y]));
drupal_set_message(t('Serial -> '.$ccserialno[$y]));
drupal_set_message(t('Secret -> '.$secret[$y]));
drupal_set_message('<BR>');
*/


}

function astsettingsdid_createdidbatch_form($edit) {
	global $user;

	$sql = db_query("select gtype, gname from astacgroup where active = '1' and mastergroup = 'DID' order by gtype ");
	$didtypelist = array();
	while ($item = db_fetch_object($sql)) {
		array_push2($didtypelist, $item->gname, $item->gtype);
	}

    $group .= astcore_form_start();
	$group .= astcore_form_textfield(t("Create From DID Number"), "fromdid", $edit['fromdid'], 40, 150, null, null, false);
	$group .= astcore_form_textfield(t("How many"), "nodid", $edit['nodid'], 40, 150, null, null, false);

	$group .= astcore_form_textfield(t("User Id (uid)"), "uid", $edit['uid'], 40, 150, null, null, false);
	$group .= astcore_form_select(t("DID Group"), "acgroup", $edit['acgroup'], $didtypelist);

	$group .= astcore_form_textfield(t("Prefix (0 if Number start with 0207xxxxxx)"), "prefix", $edit['prefix'], 10, 150, null, null, false);
	$group .= astcore_form_textfield(t("Remarks"), "remarks", $edit['remarks'], 65, 200, null, null, false);
    $group .= astcore_form_end();

	$group .= form_submit(t('Generate'));

	return form($group);
}


function settingsdid_hardware_form($account) {
	global $user;
	$edit = $_POST["edit"];
	$op = $_POST["op"];


if (arg(2) == 'addmac'){ // START CHECK IF HARDWARECREATE

	$uid = null;
	$accountcode = null;
	$secret = null;
	$hardwaretype = null;
	$hardwareid = null;
	$mac_address = null;
	$serialnumber = null;
	$comment = null;
	$name = null;

} // END CHECK IF HARDWARECREATE

	$sql = db_query("select name, uid from {users}");

	$users = array();

	while ($items = db_fetch_object($sql)) {
		array_push2($users, $items->uid.' '.$items->name, $items->uid);
	}


	$sql = db_query("select hid, hardware from asthardwareid");

	$hardwareidlist = array();

	while ($item = db_fetch_object($sql)) {
		array_push2($hardwareidlist, $item->hardware, $item->hid);
	}


	$group .= form_select(t('User/Owner of this hardware'), 'uid', $uid, $users);
	$group .= form_textfield(t('Accountcode'), 'accountcode', $accountcode, 30, 100);
 // 	$group .= form_textfield(t('Secret'), 'secret', $secret, 30, 100);
	$group .= form_textfield(t('Hardwaretype'), 'hardwaretype', $hardwaretype, 30, 100);

	$group .= form_select(t("HardwareID"), "hardwareid", $hardwareid, $hardwareidlist);

	$group .= form_textfield(t('Mac1'), 'mac1', $mac1, 5, 5);
	$group .= form_textfield(t('Mac2'), 'mac2', $mac1, 5, 5);
	$group .= form_textfield(t('Mac3'), 'mac3', $mac1, 5, 5);
	$group .= form_textfield(t('Mac4'), 'mac4', $mac1, 5, 5);
	$group .= form_textfield(t('Mac5'), 'mac5', $mac1, 5, 5);
	$group .= form_textfield(t('Mac6'), 'mac6', $mac1, 5, 5);
	$group .= form_textfield(t('Serialnumber'), 'serialnumber', $serialnumber, 30, 100);
	$group .= form_textfield(t('Comment'), 'comment', $comment, 30, 100);
//  	$group .= form_textfield(t('Name'), 'name', $name, 30, 100);

if (arg(2) == 'addmac'){
	$group .= form_submit(t('Create'));
} else {
	$group .= form_submit(t('Change'));
}
	$group .= form_submit(t('Back'));
	//$form = form_group(t('Account details'), $group);
	return form($group);
}

function settingsdid_incomming_main() {
	global $user;
	global $db_prefix;
	$edit = $_POST['edit'];
	$op = $_POST['op'];
	$value = $edit['search'];
	$tmp = astcore_flattenArray($_GET);
	
	if (!empty($tmp['searchedit'])) {
		$value = $tmp['searchedit'];
	}

	$output = astcore_search($edit, $posturl = url('astbilladm/incomming'), $value, 'NO');
	$output .= settingsdid_incomming_list($value);
	
	$title = t("Incoming Numbers");
	astcore_printtheme($output, $title);
}

function settingsdid_incomming_list($value) {
	global $user;
	global $db_prefix;

	$edit = $_POST["edit"];
	$op = $_POST["op"];

	$maxline = 40;

	$header = array(
	array('data' => t('User'), 'field' => 'name'),
	array('data' => t('UID'), 'field' => 'uid'),
	array('data' => t('Publicnumber'), 'field' => 'did', 'sort' => 'asc'),
	array('data' => t('Group'), 'field' => 'acgroup'),
	array('data' => t('Forwardto'), 'field' => 'forwardto'),
	array('data' => t('Batch'), 'field' => 'batchno'),
	array('data' => t('Operations'), 'colspan' => 3)	
	);

	$sql = "SELECT did.uid, did, acgroup, forwardto, batchno, name FROM astacdid did, {users} users WHERE did.uid = users.uid AND db_prefix = '".$db_prefix."' AND CONCAT_WS(',', did.uid, LOWER(did), LOWER(acgroup), forwardto, batchno, LOWER(name)) like LOWER('%".$value."%')". tablesort_sql($header);
	
	$result = pager_query($sql, $maxline);

  
	while ($item = db_fetch_object($result)) {
	  	$rows[] = array('<A HREF="'.url('user/'.$item->uid).'">'.$item->name.'</A>',
		$item->uid.'&nbsp;&nbsp;',
		$item->did.'&nbsp;&nbsp;',
		$item->acgroup.'&nbsp;&nbsp;',
	        $item->forwardto.'&nbsp;&nbsp;',
	        $item->batchno.'&nbsp;&nbsp;',
/*		$item->username.'&nbsp;&nbsp;',
		'<A HREF="'.url('astbilladm/realtime/friends/change/'.$item->accountcode).'"><IMG BORDER="0" src="files/astar/edit.gif"></A>&nbsp;&nbsp;',
*/		'<A HREF="'.url('astbilladm/incomming/assign/'.$item->did).'">'.t('Assign').'</A>&nbsp;&nbsp;',
//		'<A HREF="'.url('astbilladm/realtime/friends/remove/'.$item->accountcode).'/'.$item->accountcode.'">'.t('Remove').'</A>'
		);
	}

	$output = astcore_list($header, $rows, t('No Friend entries.'), $maxline);
	
	return $output;
}


function settingsdid_incomming_assign() {
  global $user;
  global $db_prefix; 

  $edit = $_POST["edit"];
  $op = $_POST["op"];

  switch (($op ? $op : arg(2))) {
    case t('Assign'):
		$sqlout = db_fetch_object(db_query("select uid from astaccount where accountcode = '%s'",$edit['assignto']));

		db_query("update astacdid set forwardto = '%s', uid = '%d'  WHERE did = '%s' and db_prefix = '".$db_prefix."'",$edit['assignto'],$sqlout->uid, arg(3));

		db_query("update astaccount set forcecallerid = '%s' WHERE accountcode = '%s' and db_prefix = '".$db_prefix."'",arg(3),$edit['assignto']);

		drupal_set_message(t('Incoming Number ').' '.arg(4).' '.t('Assigned to').' '.$edit['assignto'].t(' userid: ').$sqlout->uid);
        // astadmin_friends_save($edit,arg(4));
        drupal_goto("astbilladm/incomming");
      break;
  	// case t('Back'):
		//drupal_goto("astbilladm/realtime/friends");
    default:

		$group .= form_textfield(t("Assign to Accountcode"), "assignto", "", 40, 150, null, null, false);
		$group .= form_submit(t('Assign'));
		$output = form($group);
	    $title = t('Assign Incoming Number ').arg(3);
		$account = $user->uid;
	    astcore_printtheme($output, $title);
  }
}
